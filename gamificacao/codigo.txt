#include <Wire.h>
#include <Arduino.h>
#include "Adafruit_LiquidCrystal.h"


#define MAX_JOGADORES 6
#define DEBOUNCE  50

enum EnderecosI2C
{
    PLAYER_A = 0x20,
    PLAYER_B = 0x21,
    PLAYER_C = 0x22,
    PLAYER_D = 0x23,
    PLAYER_E = 0x24,
    PLAYER_F = 0x25,
    PROFESSOR = 0x26
};

enum Botao
{
    BOTAO_A = 0b11110111,
    BOTAO_B = 0b11111011,
    BOTAO_C = 0b11111101,
    BOTAO_D = 0b11111110,
    BOTAO_INVALIDO = 0b11111111

};

enum Mascara
{
    MASCARA_BOTOES = 0b11111111
};



enum EstadoJogo
{
    LCD_MENU_INICIAL,
    ACAO_MENU_INICIAL,
    LCD_DEF_RESPOSTA,
    ACAO_DEF_RESPOSTA,
    LCD_AGUARDAR_RESPOSTAS,
    ACAO_AGUARDAR_RESPOSTAS,
    LCD_MOSTRAR_RESULTADOS,
    ACAO_MOSTRAR_RESULTADOS,
    ACAO_ENCERRAR_JOGO
};

class Util
{
public:
    Util() {}

    static bool botaoSegurado(uint8_t device, uint8_t botao, unsigned long tempoSegurar);
    static void escreverDado(uint8_t device, uint8_t byte);
    static uint8_t lerBotao(uint8_t device, uint8_t count, uint8_t mask);
};


class Jogador
{
private:
    char nome_;
    uint8_t pontuacao_;
    uint8_t resposta_;
    uint8_t endereco_;
    unsigned long tempo_anterior_;

public:

    Jogador(char nome, uint8_t endereco)
        : nome_(nome), pontuacao_(0), resposta_(0x0), endereco_(endereco),  tempo_anterior_(0) {}

    Jogador() : nome_(' '), pontuacao_(0), resposta_(0x0), endereco_(0),  tempo_anterior_(0) {}

    void verificarBotaoPressionado();
    void marcar_ponto(uint8_t ponto);
    void reiniciar_jogador();
    char obterNome();
    uint8_t obterPontuacao();
    void definirPontuacao(uint8_t ponto);
    uint8_t obterResposta();
    void definirResposta(uint8_t resposta);
    uint8_t obterEndereco();
    unsigned long obterTempoAnterior();
    void definirTempoAnterior(unsigned long tempo);



};


class Professor {

private:
  uint8_t endereco_;
  char nome_;

public:

  Professor(char nome, uint8_t endereco)
    : nome_(nome), endereco_(endereco) {}
  Professor()
    : nome_('P'), endereco_(0) {}


  Botao verificarBotaoPressionado();
  uint8_t obterEndereco();
  char obterNome();
};

class Jogo {
public:
  Botao resposta_certa;
  bool ativo;
  Jogador jogador[MAX_JOGADORES];
  Professor professor;
  EstadoJogo estado_atual;


  Jogo()
    : resposta_certa(BOTAO_INVALIDO), ativo(false), estado_atual(LCD_MENU_INICIAL) {
  }
  void iniciar_jogo();
  void finalizarJogo();
  Botao definir_resposta_certa();
  void verificar_botoes_jogadores();
  void reiniciar_jogadores();
  void pontuar_jogadores(Botao, uint8_t);
  void redefinir_respostas_jogadores();
};


char Jogador::obterNome() {
  return this->nome_;
}

uint8_t Jogador::obterPontuacao() {
  return this->pontuacao_;
}


uint8_t Jogador::obterResposta() {
  return this->resposta_;
}

void Jogador::definirResposta(uint8_t resposta) {
  this->resposta_ = resposta;
}
uint8_t Jogador::obterEndereco() {
  return this->endereco_;
}

unsigned long Jogador::obterTempoAnterior() {
  return this->tempo_anterior_;
}

void Jogador::definirTempoAnterior(unsigned long tempo) {
  this->tempo_anterior_ = tempo;
}

void Jogador::definirPontuacao(uint8_t ponto) {
  this->pontuacao_ = ponto;
}

void Jogador::verificarBotaoPressionado() {

}

void Jogador::marcar_ponto(uint8_t ponto) {
  uint8_t pontuacao = this->obterPontuacao() + ponto;
  this->definirPontuacao(ponto);
}

void Jogador::reiniciar_jogador() {
  Util::escreverDado(this->obterEndereco(), 0b11111111);
}
Botao Jogo::definir_resposta_certa() {
  return BOTAO_INVALIDO;
}



void Jogo::redefinir_respostas_jogadores() {
  for (int i = 0; i < MAX_JOGADORES; i++) {
    this->jogador[i].definirResposta(0x0);
  }
}

void Jogo::reiniciar_jogadores() {
  for (int i = 0; i < MAX_JOGADORES; i++) {
    jogador[i].reiniciar_jogador();
  }
}

void Jogo::verificar_botoes_jogadores() {
  bool continuar = true;

  while (continuar) {
    for (int i = 0; i < MAX_JOGADORES; i++) {
      this->jogador[i].verificarBotaoPressionado();
    }
    if (this->jogador[0].obterResposta()) {
      continuar = false;
    }
  }
}

void Jogo::pontuar_jogadores(Botao resposta, uint8_t pontos) {
  for (uint8_t i = 0; i < MAX_JOGADORES; i++) {
    if (this->jogador[i].obterResposta() == resposta) {
      this->jogador[i].marcar_ponto(pontos);
    }
  }
}
void Jogo::iniciar_jogo() {
  Serial.print("Iniciou o jogo!");
  this->ativo = true;
}

void Jogo::finalizarJogo() {
  Serial.print("Acabou o jogo!");
  this->ativo = false;
}
uint8_t Professor::obterEndereco(){
    return this->endereco_;
}
char Professor::obterNome(){
    return this->nome_;
}

Botao Professor::verificarBotaoPressionado() {
    uint8_t botao_pressionado = Util::lerBotao(this->obterEndereco(), 1, MASCARA_BOTOES);
    
    switch (botao_pressionado) {
        case BOTAO_A: Serial.println("O Professor apertou a opção 'A'"); return BOTAO_A;
        case BOTAO_B: Serial.println("O Professor apertou a opção 'B'"); return BOTAO_B;
        case BOTAO_C: Serial.println("O Professor apertou a opção 'C'"); return BOTAO_C;
        case BOTAO_D: Serial.println("O Professor apertou a opção 'D'"); return BOTAO_D;
    }

    return BOTAO_INVALIDO;
}

void Util::escreverDado(uint8_t device, uint8_t byte)
{
    Wire.beginTransmission(device);
    Wire.write(byte);
    Wire.endTransmission();
    delay(1);
}

uint8_t Util::lerBotao(uint8_t device, uint8_t count, uint8_t mask)
{
    Wire.requestFrom(device, count);
    uint8_t byte = Wire.read();
    byte = byte & mask;

    return byte;
}

bool Util::botaoSegurado(uint8_t device, uint8_t botao, unsigned long tempoSegurar) {
    static unsigned long tempoInicio = 0;
    uint8_t botaoPressionado = lerBotao(device, 1, MASCARA_BOTOES);

    if (botaoPressionado == botao) {
        if (tempoInicio == 0) tempoInicio = millis();
        if (millis() - tempoInicio >= tempoSegurar) {
            tempoInicio = 0;
            return true;
        }
    } else {
        tempoInicio = 0;
    }
    return false;
}

Adafruit_LiquidCrystal lcd(0x27);
Jogo jogo;
unsigned long t_ultima_mudanca = 0;    
Botao botaoPressionado = BOTAO_INVALIDO;
Botao botaoAnterior = BOTAO_INVALIDO;



void setup() {
  Serial.begin(9600);
  lcd.begin(16, 2);
 
  
  jogo.professor = Professor('P', PROFESSOR);
  jogo.jogador[0] = Jogador('A', PLAYER_A);
  jogo.jogador[1] = Jogador('B', PLAYER_B);
  jogo.jogador[2] = Jogador('C', PLAYER_C);
  jogo.jogador[3] = Jogador('D', PLAYER_D);
  jogo.jogador[4] = Jogador('E', PLAYER_E);
  jogo.jogador[5] = Jogador('F', PLAYER_F);
  
  jogo.reiniciar_jogadores();
  
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Configurado.");

}

void loop() {
Botao botaoPressionado = jogo.professor.verificarBotaoPressionado();

  if ( millis() - t_ultima_mudanca > DEBOUNCE) {
    t_ultima_mudanca = millis();
    switch (jogo.estado_atual) {
      case LCD_MENU_INICIAL:
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("A - Iniciar");
        lcd.setCursor(0, 1);
        lcd.print("B - Finalizar");
        jogo.estado_atual = ACAO_MENU_INICIAL;
      break;

      case ACAO_MENU_INICIAL:
        if (botaoPressionado == BOTAO_A) {
          Serial.println("Iniciar jogo pressionado.");
          botaoAnterior = BOTAO_A;
          jogo.estado_atual = LCD_DEF_RESPOSTA;
        }else if (botaoPressionado == BOTAO_B) {
          Serial.println("Finalizar jogo pressionado.");
          jogo.estado_atual = ACAO_ENCERRAR_JOGO;
        }
      break;

      case LCD_DEF_RESPOSTA:
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Definir Resposta:");
        lcd.setCursor(0, 1);
        lcd.print("A/B/C/D");
        jogo.estado_atual = ACAO_DEF_RESPOSTA;
      break;

      case ACAO_DEF_RESPOSTA:
        if (botaoPressionado != botaoAnterior) {
          botaoAnterior = botaoPressionado;
          if(botaoPressionado != BOTAO_INVALIDO){
            Serial.print("Resposta correta definida: ");
            Serial.println(botaoPressionado);
            jogo.estado_atual = LCD_AGUARDAR_RESPOSTAS;
          }
        }
      break;
      case LCD_AGUARDAR_RESPOSTAS:
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Aguardando jog...");
        jogo.estado_atual = ACAO_AGUARDAR_RESPOSTAS;
      break;
      case ACAO_AGUARDAR_RESPOSTAS:
        //jogo.verificar_botoes_jogadores();
        jogo.estado_atual = LCD_MOSTRAR_RESULTADOS;
      break;
      case LCD_MOSTRAR_RESULTADOS:
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Mostrando result");
        // Aqui você pode percorrer os jogadores e mostrar pontuação
        jogo.estado_atual = ACAO_MOSTRAR_RESULTADOS;
      break;
      case ACAO_MOSTRAR_RESULTADOS:
        // Por exemplo, pontuar jogadores
        jogo.pontuar_jogadores(jogo.resposta_certa, 1);
        jogo.estado_atual = ACAO_ENCERRAR_JOGO;
      break;
      case ACAO_ENCERRAR_JOGO:
        Serial.println("Jogo encerrado.");
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("Jogo encerrado");
        jogo.finalizarJogo();
        // Volta para menu inicial
        jogo.estado_atual = LCD_MENU_INICIAL;
      break;
    }
  }
}
